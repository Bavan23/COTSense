Build a professional, modern, user-friendly frontend for COTSense, a commercial off-the-shelf component recommendation system. The backend is a FastAPI server serving ML-powered embeddings and FAISS search. It exposes APIs for:

/api/recommend → returns top K components based on a user query.

Optional: /api/explain → returns AI explanations using Gemini.

The frontend should consume these APIs and provide a smooth UX for engineers/designers to find parts quickly, see specifications, pricing, availability, and explanations.

1️⃣ Pages & Components

Home / Dashboard

Hero section with project name and tagline: “Find the perfect COTS components instantly.”

Search bar for natural language queries (e.g., “5V regulator, 3A, < $2”)

Recent searches / trending queries

Optional: quick links to categories (Semiconductors, Passive, Connectors, etc.)

Search Results Page

Table/grid of top K recommended components:

Columns: Part Number, Manufacturer, Category, Spec Match, Total Score, Price, Stock

Each row expandable to show detailed explanation (from ML + Gemini)

Sortable columns (Price, Spec Match, Total Score)

Pagination / Infinite Scroll for large results

Highlight top recommendations visually

“Export Results” button (CSV/Excel)

Component Details Page (Optional)

Show all specs, stock info, pricing history, and compatibility notes

Option to compare multiple parts side-by-side

Admin / Upload Page

Allow upload of new component data (parquet/csv)

Trigger embedding regeneration and FAISS rebuild

Show status of last backend updates

About / Documentation Page

Overview of COTSense, backend ML logic, FAISS search

How to use, API references

2️⃣ UI/UX Guidelines

Frameworks: React (TypeScript), Next.js optional, TailwindCSS or Material-UI for modern design

Responsive design: Works on desktop, tablet, mobile

Interactive elements:

Search bar with live suggestions

Sortable & filterable tables

Loading indicators during API calls

Tooltips for technical terms

Colors & Theme:

Engineering/tech vibe: dark or light mode

Highlight colors for recommended/high-score components

Animations:

Fade-in for search results

Hover effects on rows/buttons

3️⃣ API Integration & Logic

Search Flow:

User enters a query in search bar

Frontend sends POST request to /api/recommend with {query, top_k}

Backend returns top K components

Frontend maps results to table/grid

Optional: Call /api/explain to show reasoning for each component

State Management:

Use React Context / Redux / Zustand for global state

Store search results, loading state, recent queries

Error Handling:

Show friendly messages for network errors or empty results

Retry option if FAISS backend is busy

Performance:

Lazy-load components

Debounce search input

Cache recent search results

4️⃣ Routes & Navigation
/              → Home / Search Dashboard
/search        → Search results page
/component/:id → Component details page
/admin         → Admin / Upload page
/about         → About / Documentation


Use React Router or Next.js routing

Keep URL sync with query state (?query=5V+regulator&top_k=10)

5️⃣ Extra Features / Enhancements

Export: Allow export of search results to CSV/Excel

Compare: Compare 2–5 components side by side

Favorites: Bookmark components in local storage

Analytics: Track user searches to show trending components

Lightweight AI assistant: Optional chat widget that explains why parts are recommended

6️⃣ Deliverables from the Prompt

Full React/Next.js project with components, pages, routes

TailwindCSS/Material UI styled UI

API integration ready for COTSense backend

Reusable components (SearchBar, Table, Card, Modal)

Responsive, production-ready, and clean folder structure

✅ Instruction for the Generator

Generate the entire frontend project folder structure with:

pages/ or src/pages/

components/

services/api.ts (functions to call FastAPI backend)

All pages: Home, Search Results, Component Detail, Admin, About

Fully integrated with ML backend API endpoints

Styled and responsive with modern UI/UX

Include comments explaining key functionality